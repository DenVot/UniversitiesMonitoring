using System.Net;
using System.Net.Mail;
using UniversityMonitoring.Data.Entities;

namespace UniversitiesMonitoring.NotifyService.Notifying;

internal class EmailNotifier
{
    private readonly SmtpClient _emailClient;
    private readonly MailAddress _mailAddress;
    
    public EmailNotifier(IConfiguration configuration)
    {
        var address = configuration["Email:Username"];
        _mailAddress = new MailAddress(address);
        _emailClient = new SmtpClient()
        {
            Host = "mail.hosting.reg.ru",
            Port = 587,
            Credentials = new NetworkCredential(address, configuration["Email:Password"]),
            EnableSsl = false
        };
    }
    
    public async Task NotifyAsync(UserEntity userEntity, UniversityServiceEntity serviceEntity)
    {
        if (userEntity.Email == null) return;
        var message = CreateMailMessage(serviceEntity.ServiceName, serviceEntity.IsOnline, serviceEntity.ServiceId);
        message.To.Add(userEntity.Email);
        
        await _emailClient.SendMailAsync(message);
    }

    private MailMessage CreateMailMessage(string serviceName, bool isOnline, ulong serviceId) =>
        new()
        {
            From = _mailAddress,
            Subject = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞",
            Body =
                $"<b>üì¢ –°–µ—Ä–≤–∏—Å {serviceName} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ {(isOnline ? "–æ–Ω–ª–∞–π–Ω üü¢" : "–æ—Ñ–ª–∞–π–Ω üî¥")}</b><br/>" +
                (!isOnline ? $"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ  <a href=\"https://universitiesmonitoring.ru/services/{serviceId}\">—Å—Å—ã–ª–∫–µ</a>" : string.Empty),
            IsBodyHtml = true
        };
}